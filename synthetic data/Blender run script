""" This is a run script. """
import logging
import math
import os
import random
from pathlib import Path

import bpy
import zpy

log = logging.getLogger("zpy")


def run(num_images: int = 20):

    # Random seed results in unique behavior
    zpy.blender.set_seed()

    # Create the saver object
    saver = zpy.saver_image.ImageSaver(description="Gear Dataset")

    # Add the lego category
    gear_seg_color = zpy.color.random_color(output_style="frgb")
    saver.add_category(name="Gear", color=gear_seg_color)

    # Segment lego (make sure a material exists for the object!)
    zpy.objects.segment("Gear", color=gear_seg_color)
    
    # Save the positions of objects so we can jitter them later
    zpy.objects.save_pose("Camera", "cam_pose")
    zpy.objects.save_pose("Gear", "gear_pose")

    # Run the sim.
    for step_idx in zpy.blender.step(num_steps=num_images):

        # Example logging
        log.info("This is an info log")
        log.debug("This is a debug log")

        # Return camera and lego to original positions
        zpy.objects.restore_pose("Camera", "cam_pose")
        zpy.objects.restore_pose("Gear", "gear_pose")
        
        # Jitter lego pose
        zpy.objects.jitter(
            "Gear",
            translate_range=((-3, 3), (-3, 3), (-5, 5)),
            rotate_range=(
                (-math.pi, math.pi),
                (-math.pi, math.pi),
                (-math.pi, math.pi),
            ),
        )

        # Camera should be looking at lego
        zpy.camera.look_at("Camera", bpy.data.objects["Gear"].location)
        
        # Jitter the camera pose
        zpy.objects.jitter(
            "Camera",
            translate_range=(
                (-5, 5),
                (-5, 5),
                (-5, 5),
            ),
        )
        
        # HDRIs are like a pre-made background with lighting
        zpy.hdris.random_hdri()

        # Jitter the HSV for empty and full images
        hsv = (
            random.uniform(0.49, 0.51),  # (hue)
            random.uniform(0.95, 1.1),  # (saturation)
            random.uniform(0.75, 1.2),  # (value)
        )

        # Name for each of the output images
        rgb_image_name = zpy.files.make_rgb_image_name(step_idx)
        iseg_image_name = zpy.files.make_iseg_image_name(step_idx)

        # Render image
        zpy.render.render(
            rgb_path=saver.output_dir / rgb_image_name,
            iseg_path=saver.output_dir / iseg_image_name,
            hsv=hsv,
        )

        # Add images to saver
        saver.add_image(
            name=rgb_image_name,
            style="default",
            output_path=saver.output_dir / rgb_image_name,
            frame=step_idx,
        )
        saver.add_image(
            name=iseg_image_name,
            style="segmentation",
            output_path=saver.output_dir / iseg_image_name,
            frame=step_idx,
        )
        # Add annotation to segmentation image
        saver.add_annotation(
            image=rgb_image_name,
            seg_image=iseg_image_name,
            seg_color=gear_seg_color,
            category="Gear",
        )
    # COCO Annotations
    zpy.output_coco.OutputCOCO(saver).output_annotations()


if __name__ == "__main__":

    # Set the logger levels
    zpy.logging.set_log_levels("info")

    # Parse the gin-config text block
    zpy.blender.parse_config("config")

    # Run the sim
    run()
